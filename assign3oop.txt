1) create a class with constructors and destructors.
create array of instances and observe how program behaves.

#include<iostream>
using namespace std;

class Myclass {
private : 
	int num;
public :
	Myclass(int num) {
		this->num = num;
		cout << "inside const" << num << endl;
	}


	~Myclass() {
		cout << "inside destructor" << num<<endl;
	}
};

int main() {

	Myclass s[3] = {Myclass(1),Myclass(2),Myclass(3)};
}

-----------------------------------------------------------------

2) create a class with constructors and destructor.
create 2 instances on stack and 1 instance on heap. observe the invocation of constructors and destructors.

#include<iostream>
using namespace std;

class Myclass {
private : 
	int num;
public :

	Myclass() {
		cout << "inside const"<<endl;
	}
	Myclass(int num) {
		this->num = num;
		cout << "inside const" << num << endl;
	}


	~Myclass() {
		cout << "inside destructor" << num<<endl;
	}
};

int main() {

	Myclass s1(1);
	Myclass s2(2);
	Myclass *s3 = new Myclass(3);

	delete s3;

}

---------------------------------------------------------------------
3)create a class "MyClass1"
with members and member function "disp1().
create another class "MyClass2"
with members and member function "disp2().
now try to invoke disp1() from disp2()
in the main() function, create instances of both the classes and invoke their member functions.


#include<iostream>
using namespace std;

class Myclass1 {
private : 
	int num;
public :
	void disp1() {
		cout << "inside disp 1"<<endl;
	}
	
};

class Myclass2 {
private:
	int num;
public:
	void disp2(Myclass1& ref) {
		ref.disp1();
		cout << "inside disp 2"<<endl;
	}

};


int main() {
	Myclass1 m1;
	Myclass2 m2;

	m1.disp1();
	m2.disp2(m1);


}

------------------------------------------------------------------
4) create a class.
accept from user, how many instances are required.
Accordingly create array of instances dynamically.
Now make sure that u call destructor for each and every instances.


#include<iostream>
using namespace std;

class Myclass1 {
private : 
	int num;
public :
	void disp1() {
		cout << "inside disp "<<endl;
	}


	~Myclass1() {
		cout << "inside destruct" << endl;
	}
	
};




int main() {
	int inst;
	cin >> inst;

	Myclass1* ptr =  new Myclass1[inst];

	for (int i = 0; i < inst; i++) {
		ptr[i].disp1();
	}

	delete[] ptr;

}

--------------------------------------------------------------------
5) create a class, define different types of constructors. in main create n number of objects. At the end display how many constructors are created for a class.


#include<iostream>
#include <string.h>
using namespace std;

class Student{
    int rollNo;
    char* name;
public:
    Student(){
        cout<<"no-arg contructor"<<endl;
    }
    Student(int rollNo,char name[]){
        this->rollNo;
         this->name = new char[strlen(name) + 1];
        strcpy(this->name, name);
        cout<<"params Contructor"<<endl;
    }
    Student(Student &ref){
        this->rollNo=ref.rollNo;
        this->name = new char[strlen(ref.name) + 1];
        strcpy(this->name, ref.name);
        cout<<"In copy constructor"<<endl;

    }
    ~Student(){
        cout<<"In destructor of "<<rollNo<<"\t"<<name<<endl;
        delete[] name;
    }
    void disp(){
        cout<<"indisp"<<endl;
    }
};
int main(){
    
    Student s;
    Student s1(01,"Akshay");
    Student* s2=new Student();
    Student* s3=new Student(02,"Rohit");
    Student s4=s1; 

    delete s2;
    delete s3;

    return 0;
}



