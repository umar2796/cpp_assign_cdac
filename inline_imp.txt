C++ provides inline functions to reduce the function call overhead. 

Normally, a function call transfers the control from the calling program to the called function. This process of jumping to the function, saving registers, passing a value to the argument, and returning the value to the calling function takes extra time and memory.
An inline function is a function that is expanded inline when it is invoked, thus saving time. 


Remember, inlining is only a request to the compiler, not a command. The compiler can ignore the request for inlining. t is called. 

Inline function and classes

It is also possible to define the inline function inside the class. In fact, all the functions defined inside the class are implicitly inline. Thus, all the restrictions of inline functions are also applied here. If you need to explicitly declare an inline function in the class then just declare the function inside the class and define it outside the class using the inline keyword. 



class S
{
public:
    inline int square(int s) // redundant use of inline
    {
        // this function is automatically inline
        // function body
    }
};
The above style is considered a bad programming style. The best programming style is to just write the prototype of the function inside the class and specify it as an inline in the function definition. 

For Example: 

class S
{
public:
    int square(int s); // declare the function
};

inline int S::square(int s) // use inline prefix
{
}