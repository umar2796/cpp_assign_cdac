1) 
class course
{
	//here
};
class DacCourse:public course
{
	// here
};

you should be able to say following

course *c=new course;
c->fees(); // course version should be called
c=new DacCourse;
c->fees();  // DacCourse version should be called


---------------------------------------------
#include<iostream>
using namespace std;

class course {
public:
	virtual void fee() {
		cout << "cousre fee" << endl;
	}
};
class Dac: public course {
public:
	void fee() {
		cout << "dac fee" << endl;
	}
};

int main() {

	course* ptr = new course;
	ptr->fee();
	ptr = new Dac;
	ptr->fee();

}
---------------------------------------------------------------------------

2) 
Create a base class FourWheeler. Declare pure virtual function “void start()” in it. 			
Define following sub classes for this class. 
A) Qualis b) Sumo c) Volvo 					
Define “start” function in these classes.			In main function , create array of pointer to FourWheeler which will contain objects of these three sub classes. 
Now traverse the array and call all the child class methods.
-------------------------------------------------------------

#include<iostream>
using namespace std;

class FourWheeler {
public:
	virtual void start() = 0;
};
class chervolet: public FourWheeler {
public:
	void start() {
		cout << "tavera ignition" << endl;
	}
};


class sumo : public FourWheeler {
public:
	void start() {
		cout << "sumo ignition" << endl;
	}
};


class Volvo : public FourWheeler {
public:
	void start() {
		cout << "Volvo ignition" << endl;
	}
};

int main() {

	FourWheeler* ptr[3] = { new chervolet,new sumo,new Volvo };
	for (int i = 0; i < 3; i++) {
		ptr[i]->start();
	}

}
----------------------------------------------------------------------------
3)
Create a base class “Subject”.Declare pure virtual function “void maxmarks()” in it.  Define following sub classes for this class. A) Maths b) History c) English.	Define “maxmarks” in these classes.

now write a global function "show" which will accept "subject class pointer" as an argument. this function should be able to call "maxmarks()" of any child class which is passed.
From main function try to call this function by passing various child classes.
-------------------------------------------------------------
#include<iostream>
using namespace std;

class subject {
public:
	virtual void maxmarks() = 0;
};
class maths: public subject {
public:
	void maxmarks() {
		cout << "maths 75 maxmarks"  << endl;
	}
};


class history : public subject {
public:
	void maxmarks() {
		cout << "history 70 maxmarks"  << endl;
	}
};


class english : public subject {
public:
	void maxmarks() {
		cout << "eng 80 maxmarks" << endl;
	}
};

void show( 

}
int main() {
	/*
	subject* ptr[3] = { new maths,new history,new english };
	for (int i = 0; i < 3; i++) {
		show(ptr[i]);
	}*/

	show(new maths);
	show(new history);
	show(new english);

}



----------------------------------------------------------------------------

4) same as above except it has to be done using reference of parent class.

----------------------------------------------------------

#include<iostream>
using namespace std;

class subject {
public:
	virtual void maxmarks() = 0;
};
class maths: public subject {
public:
	void maxmarks() {
		cout << "maths 75 maxmarks"  << endl;
	}
};


class history : public subject {
public:
	void maxmarks() {
		cout << "history 70 maxmarks"  << endl;
	}
};


class english : public subject {
public:
	void maxmarks() {
		cout << "eng 80 maxmarks" << endl;
	}
};

void show(subject &ref) {
	ref.maxmarks();

}
int main() {
	/*
	subject* ptr[3] = { new maths,new history,new english };
	for (int i = 0; i < 3; i++) {
		show(ptr[i]);
	}*/
	 maths o1;
	 history o2;
	 english o3;
	show(o1);
	show(o2);
	show(o3);

}
----------------------------------------------------------------------------
5) create an abstract class Shape with
	virtual void display()
	{
		cout<<"display on the canvas"<<endl;
	}
	and
	pure virtual function (contract) void draw() 
functions.

now derive 3 classes from Shape
	Circle,Triangle and Rectangle
in the main function create array of pointer to Shape class and store all the child class objects addresses inside it. Traverse the array and invoke "display()" and "draw()" functions.
------------------------------------------------------

#include<iostream>
using namespace std;

class shape {
public:
	virtual void display()
	{
		cout << "display on the canvas" << endl;
		cout << endl;
	}
	
	virtual void draw() = 0;

};
class Circle: public shape {
public:
	/*void display()
	{
		cout << "display on the canvas" << endl;
	}*/
	void draw() {
		cout << "draw circle" << endl;
	}
};


class Triangle : public shape {
public:
	/*void display()
	{
		cout << "display on the canvas" << endl;
	}*/

	void draw() {
		cout << "draw traingle"  << endl;
	}
};


class Rectangle : public shape {
public:
	/*void display()
	{
		cout << "display rect" << endl;
	}
	*/
	void draw() {
		cout << "draw rect" << endl;
	}
};

void show(shape &ref) {
	//ref.maxmarks();

}
int main() {
	
	shape* ptr[3] = { new Circle,new Triangle,new Rectangle};
	for (int i = 0; i < 3; i++) {
		ptr[i]->draw();
		ptr[i]->display();


	}
	

}

----------------------------------------------------------------------------