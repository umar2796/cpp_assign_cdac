pointer to constant

syntax:

datatype const *ptr

or

const datatype *ptr

can point to const as well as non-const member. pointer can be changed but using pointer u can not modify the member to which it points to.


e.g.

int num=100;
const int *ptr;
	or
int const *ptr;
ptr=&num;

cout<<num<<"\t"<<*ptr<<endl;

num=200;

cout<<num<<"\t"<<*ptr<<endl;

// *ptr=400;  // not allowed

ptr++;  // allowed 


with const member


const int var=500;
const int *ptr1;
	or
int const *ptr1;

ptr1=&var;

cout<<var<<"\t"<<*ptr1<<endl;

var=600; // not allowed

*ptr1=600; //not allowed

ptr1--;  // allowed


--------------------------------------------------------------
Constant Pointer

	syntax:

	datatype * const pointervar=address;


can point to non-const member only. pointer cannot be changed but using pointer u can modify the member to which it points to.


e.g

	int num=200;

	int *const ptr1=&num;


	cout<<num<<"\t"<<*ptr1<<endl;

	num=400;  // allowed


	cout<<num<<"\t"<<*ptr1<<endl;


	ptr1++ ;  // not allowed


	*ptr1=600;  // allowed

	cout<<num<<"\t"<<*ptr1<<endl;



	const int num1=250;
	int *const ptr2=&num1;   // not allowed
---------------------------------------------------------------------
Constant Pointer to a Constant

	syntax:

		const datatype *const pointervar=address

			or
		datatype const *const pointervar=address


can point to const as well as non-const members. neither u can modify pointer nor can modify the member to which it points to.

e.g.

int num=100;
const int *const ptr1=&num;

cout<<num<<"\t"<<*ptr1<<endl;

ptr1++;   // not allowed

*ptr1=400; // not allowed

num=300;

cout<<num<<"\t"<<*ptr1<<endl;


with const member 


const int num1=100;
const int *const ptr2=&num;

cout<<num1<<"\t"<<*ptr2<<endl;

ptr2++;   // not allowed

*ptr2=400; // not allowed

num1=300;  // not allowed


